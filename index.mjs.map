{"version":3,"file":"index.mjs","sources":["../base/dtype2wasm/lib/main.js","../base/lib/index.js","../base/array2dtype/lib/main.js","../base/arrays2ptrs/lib/main.js","../base/strided2object/lib/main.js","../memory/lib/main.js","../memory/lib/index.js","../memory/lib/polyfill.js","../module-wrapper/lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport TABLE from './table.json';\n\n\n// MAIN //\n\n/**\n* Returns the WebAssembly data type associated with a provided array data type value.\n*\n* @param {string} dtype - array data type\n* @returns {string} WebAssembly data type\n*\n* @example\n* var out = dtype2wasm( 'float64' );\n* // returns 'float64'\n*\n* out = dtype2wasm( 'generic' );\n* // returns 'float64'\n*/\nfunction dtype2wasm( dtype ) {\n\treturn TABLE[ dtype ] || 'float64';\n}\n\n\n// EXPORTS //\n\nexport default dtype2wasm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name array2dtype\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/wasm/base/array2dtype}\n*/\nimport array2dtype from './../../base/array2dtype';\nsetReadOnly( ns, 'array2dtype', array2dtype );\n\n/**\n* @name arrays2ptrs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/wasm/base/arrays2ptrs}\n*/\nimport arrays2ptrs from './../../base/arrays2ptrs';\nsetReadOnly( ns, 'arrays2ptrs', arrays2ptrs );\n\n/**\n* @name dtype2wasm\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/wasm/base/dtype2wasm}\n*/\nimport dtype2wasm from './../../base/dtype2wasm';\nsetReadOnly( ns, 'dtype2wasm', dtype2wasm );\n\n/**\n* @name strided2object\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/wasm/base/strided2object}\n*/\nimport strided2object from './../../base/strided2object';\nsetReadOnly( ns, 'strided2object', strided2object );\n\n\n// EXPORTS //\n\nexport default ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport dtype from '@stdlib/array/dtype';\nimport dtype2wasm from './../../../base/dtype2wasm';\n\n\n// MAIN //\n\n/**\n* Returns the WebAssembly data type for a provided array.\n*\n* @param {Collection} array - input array\n* @returns {string} data type\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var dt = array2dtype( new Float64Array( 4 ) );\n* // returns 'float64'\n*\n* @example\n* var dt = array2dtype( [ 0, 1, 0, 1 ] );\n* // returns 'float64'\n*\n* @example\n* import Float32Array from '@stdlib/array/float32';\n*\n* var dt = array2dtype( new Float32Array( 4 ) );\n* // returns 'float32'\n*/\nfunction array2dtype( array ) {\n\treturn dtype2wasm( dtype( array ) || 'generic' );\n}\n\n\n// EXPORTS //\n\nexport default array2dtype;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport objectAssign from '@stdlib/object/assign';\nimport bytesPerElement from '@stdlib/ndarray/base/bytes-per-element';\nimport { ndarray as writeDataView } from '@stdlib/strided/base/write-dataview';\n\n\n// MAIN //\n\n/**\n* Converts a list of arrays to \"pointers\" (i.e., byte offsets) in WebAssembly module memory.\n*\n* ## Notes\n*\n* -   Beware that this function may reallocate module memory, resulting in `ArrayBuffer` detachment and the invalidation of any typed array views which were views of the previously allocated memory. Additionally, this function may write to module memory and does so without regard for any existing memory content. Users are thus encouraged to take suitable precautions (e.g., copying results out of module memory prior to subsequent invocation) in order to avoid unexpected results.\n*\n* -   Each element in the list of input arrays should have the following properties:\n*\n*     -   **dtype**: array data type.\n*     -   **wdtype**: WebAssembly array data type.\n*     -   **length**: number of indexed elements.\n*     -   **data**: original array-like object.\n*     -   **stride**: index increment.\n*     -   **offset**: index offset.\n*\n* -   In addition to each element's existing properties, each element of the returned array has the following additional properties:\n*\n*     -   **BYTES_PER_ELEMENT**: number of bytes per element.\n*     -   **ptr**: byte offset.\n*     -   **nbytes**: number of bytes consumed by **indexed** array elements as stored in module memory.\n*     -   **copy**: boolean indicating whether an array had to be copied to module memory.\n*\n* -   If an array's data is copied to module memory, the data is copied to a contiguous segment of module memory, and the respective array object in the returned array will have unit stride and an offset of zero.\n*\n* @param {Object} ctx - module context\n* @param {Function} ctx.isView - function to check whether an array is a view on a module's memory\n* @param {Function} ctx.realloc - function to reallocate module memory\n* @param {DataView} ctx.view - data accessor which returns the current `DataView` of module memory\n* @param {Array<Object>} list - list of array objects\n* @returns {Array<Object>} list of pointers\n*\n* @example\n* import setReadOnlyAccessor from '@stdlib/utils/define-configurable-read-only-accessor';\n* import ArrayBuffer from '@stdlib/array/buffer';\n* import DataView from '@stdlib/array/dataview';\n* import Float64Array from '@stdlib/array/float64';\n* import dtype2wasm from '@stdlib/wasm/base/dtype2wasm';\n*\n* function Context() {\n*     this._buffer = new ArrayBuffer( 100 );\n*     return this;\n* }\n*\n* Context.prototype.isView = function isView( arr ) {\n*     return ( arr.buffer ) ? ( arr.buffer === this._buffer ) : false;\n* };\n*\n* Context.prototype.realloc = function realloc( nbytes ) {\n*     this._buffer = new ArrayBuffer( nbytes );\n* };\n*\n* setReadOnlyAccessor( Context.prototype, 'view', function getter() {\n*     return new DataView( this._buffer );\n* });\n*\n* // ...\n*\n* var ctx = new Context();\n*\n* // ...\n*\n* var x = new Float64Array( 4 );\n* var y = new Float64Array( 4 );\n*\n* // ...\n*\n* var xobj = {\n*     'dtype': 'float64',\n*     'wdtype': dtype2wasm( 'float64' ),\n*     'length': x.length,\n*     'data': x,\n*     'stride': 1,\n*     'offset': 0\n* };\n*\n* var yobj = {\n*     'dtype': 'float64',\n*     'wdtype': dtype2wasm( 'float64' ),\n*     'length': y.length,\n*     'data': y,\n*     'stride': 1,\n*     'offset': 0\n* };\n*\n* var out = arrays2ptrs( ctx, [ xobj, yobj ] );\n* // returns [...]\n*/\nfunction arrays2ptrs( ctx, list ) {\n\tvar ptr;\n\tvar out;\n\tvar tmp;\n\tvar o;\n\tvar n;\n\tvar i;\n\n\t// Initialize an output array:\n\tout = [];\n\n\t// Attempt to resolve \"pointers\" to arrays stored in module memory...\n\tn = 0;\n\tfor ( i = 0; i < list.length; i++ ) {\n\t\to = list[ i ];\n\n\t\t// Copy over properties from the input array object:\n\t\ttmp = objectAssign( {}, o );\n\n\t\t// Compute array byte properties:\n\t\ttmp.BYTES_PER_ELEMENT = bytesPerElement( o.wdtype );\n\t\ttmp.nbytes = o.length * tmp.BYTES_PER_ELEMENT;\n\n\t\t// If provided a memory view, resolve the byte offset; otherwise, indicate that the array needs to be copied to module memory...\n\t\tif ( ctx.isView( o.data ) ) {\n\t\t\ttmp.ptr = o.data.byteOffset;\n\t\t\ttmp.copy = false;\n\t\t} else {\n\t\t\ttmp.ptr = -1;\n\t\t\ttmp.copy = true;\n\t\t\tn += tmp.nbytes;\n\t\t}\n\t\tout.push( tmp );\n\t}\n\t// If we were unable to resolve one or more pointers, ensure that the module has enough memory to hold copied array data...\n\tif ( n > 0 ) {\n\t\tctx.realloc( n );\n\t}\n\t// For arrays which are not stored in module memory, copy the respective data to module memory...\n\tptr = 0;\n\tfor ( i = 0; i < out.length; i++ ) {\n\t\to = out[ i ];\n\t\tif ( o.copy ) {\n\t\t\twriteDataView( o.length, o.data, o.stride, o.offset, ctx.view, o.BYTES_PER_ELEMENT, ptr, true ); // eslint-disable-line max-len\n\n\t\t\t// Update the array pointer (i.e., byte offset):\n\t\t\to.ptr = ptr;\n\n\t\t\t// Update the stride and offset to reflect that the data is stored contiguously in module memory:\n\t\t\to.stride = 1;\n\t\t\to.offset = 0;\n\n\t\t\t// Increment the byte offset to mark the start of the next array:\n\t\t\tptr += o.nbytes;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default arrays2ptrs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport base from '@stdlib/strided/base/strided2object';\nimport dtype2wasm from './../../../base/dtype2wasm';\n\n\n// MAIN //\n\n/**\n* Converts a strided array and associated metadata to an object likely to have the same \"shape\".\n*\n* ## Notes\n*\n* -   This function is intended as a potential performance optimization. In V8, for example, even if two objects share common properties, if those properties were added in different orders or if one object has additional properties not shared by the other object, then those objects will have different \"hidden\" classes. If a function is provided many objects having different \"shapes\", some JavaScript VMs (e.g., V8) will consider the function \"megamorphic\" and fail to perform various runtime optimizations. Accordingly, the intent of this function is to standardize the \"shape\" of the object holding strided array metadata to ensure that internal functions operating on strided arrays are provided consistent argument \"shapes\".\n*\n* -   The returned object has the following properties:\n*\n*     -   **data**: reference to the input array.\n*     -   **dtype**: array data type.\n*     -   **wdtype**: WebAssembly data type.\n*     -   **length**: number of indexed elements.\n*     -   **stride**: index increment.\n*     -   **offset**: starting index.\n*     -   **accessorProtocol**: boolean indicating whether the input array uses accessors for getting and setting elements.\n*     -   **accessors**: a two-element array whose first element is an accessor for retrieving an array element and whose second element is an accessor for setting an array element.\n*\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} stride - array stride\n* @param {NonNegativeInteger} offset - index offset\n* @returns {Object} output object\n*\n* @example\n* import Float64Array from '@stdlib/array/float64';\n*\n* var x = new Float64Array( 5 );\n*\n* var obj = strided2object( x.length, x, 1, 0 );\n* // returns {...}\n*\n* var dt = obj.dtype;\n* // returns 'float64'\n*\n* var len = obj.length;\n* // returns 5\n*\n* var data = obj.data;\n* // returns <Float64Array>\n*\n* var sx = obj.stride;\n* // returns 1\n*\n* var ox = obj.offset;\n* // returns 0\n*/\nfunction strided2object( N, x, stride, offset ) {\n\tvar obj = base( N, x, stride, offset );\n\tobj.wdtype = dtype2wasm( obj.dtype || 'generic' );\n\treturn obj;\n}\n\n\n// EXPORTS //\n\nexport default strided2object;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* WebAssembly memory constructor.\n*\n* @name Memory\n* @constructor\n* @type {Function}\n* @param {Object} descriptor - memory descriptor object\n* @param {NonNegativeInteger} descriptor.initial - initial size of WebAssembly memory (in units of pages)\n* @param {NonNegativeInteger} [descriptor.maximum] - maximum size that WebAssembly memory is allowed to grow to (in units of pages)\n* @param {boolean} [descriptor.shared=false] - boolean indicating whether the memory is shared\n* @returns {Memory} memory instance\n*\n* @example\n* var mem = new Memory({\n*     'initial': 0\n* });\n*/\nvar Memory = ( typeof WebAssembly === 'object' ) ? WebAssembly.Memory : null;\n\n\n// EXPORTS //\n\nexport default Memory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* WebAssembly memory constructor.\n*\n* @module @stdlib/wasm/memory\n*\n* @example\n* import Memory from '@stdlib/wasm/memory';\n*\n* var mem = new Memory({\n*     'initial': 0\n* });\n*/\n\n// MODULES //\n\nimport hasWebAssemblySupport from '@stdlib/assert/has-wasm-support';\nimport builtin from './main.js';\nimport polyfill from './polyfill.js';\n\n\n// MAIN //\n\nvar main;\nif ( hasWebAssemblySupport() ) {\n\tmain = builtin;\n} else {\n\tmain = polyfill;\n}\n\n\n// EXPORTS //\n\nexport default main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* WebAssembly memory constructor.\n*\n* @throws {Error} not implemented\n*/\nfunction polyfill() {\n\tthrow new Error( 'not implemented' );\n}\n\n\n// EXPORTS //\n\nexport default polyfill;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this, no-underscore-dangle */\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert/is-nonnegative-integer';\nimport isCollection from '@stdlib/assert/is-collection';\nimport isArrayBuffer from '@stdlib/assert/is-arraybuffer';\nimport isFunction from '@stdlib/assert/is-function';\nimport setReadOnly from '@stdlib/utils/define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils/define-nonenumerable-read-only-accessor';\nimport hasWebAssemblySupport from '@stdlib/assert/has-wasm-support';\nimport objectAssign from '@stdlib/object/assign';\nimport Uint8Array from '@stdlib/array/uint8';\nimport DataView from '@stdlib/array/dataview';\nimport bytesPerElement from '@stdlib/ndarray/base/bytes-per-element';\nimport ceil from '@stdlib/math/base/special/ceil';\nimport { ndarray as writeDataView } from '@stdlib/strided/base/write-dataview';\nimport { ndarray as readDataView } from '@stdlib/strided/base/read-dataview';\nimport dtype from '@stdlib/array/dtype';\nimport dtype2wasm from './../../base/dtype2wasm';\nimport format from '@stdlib/string/format';\n\n\n// VARIABLES //\n\nvar HAS_WASM_SUPPORT = hasWebAssemblySupport();\nvar PAGE_SIZE = 64 * 1024; // 64KiB = size of 1 page   // TODO: consider moving to `@stdlib/constants/wasm/page-size`\n\n\n// MAIN //\n\n/**\n* WebAssembly module wrapper constructor.\n*\n* @constructor\n* @param {(Uint8Array|ArrayBuffer)} binary - WebAssembly binary code\n* @param {(Object|null)} memory - WebAssembly memory instance\n* @param {Object} [imports] - WebAssembly module import object\n* @throws {Error} environment does not support WebAssembly\n* @returns {WasmModule} wrapper instance\n*/\nfunction WasmModule( binary, memory, imports ) {\n\tif ( !( this instanceof WasmModule ) ) {\n\t\tif ( arguments.length > 2 ) {\n\t\t\treturn new WasmModule( binary, memory, imports );\n\t\t}\n\t\treturn new WasmModule( binary, memory, {} );\n\t}\n\tif ( !HAS_WASM_SUPPORT ) {\n\t\tthrow new Error( 'unexpected error. Environment does not support WebAssembly.' );\n\t}\n\tif ( isArrayBuffer( binary ) ) {\n\t\tbinary = new Uint8Array( binary );\n\t}\n\tthis._binary = binary;\n\tthis._module = null;\n\tthis._instance = null;\n\tthis._imports = imports;\n\n\tif ( memory ) {\n\t\tthis._memory = memory;\n\t\tthis._view = new DataView( memory.buffer );\n\t\tthis._buffer = new Uint8Array( memory.buffer );\n\t} else {\n\t\tthis._memory = null;\n\t\tthis._view = null;\n\t\tthis._buffer = null;\n\t}\n\n\treturn this;\n}\n\n/**\n* Returns WebAssembly binary code.\n*\n* @name binary\n* @memberof WasmModule.prototype\n* @readonly\n* @type {Uint8Array}\n*/\nsetReadOnlyAccessor( WasmModule.prototype, 'binary', function get() {\n\treturn this._binary.slice();\n});\n\n/**\n* Returns WebAssembly memory.\n*\n* @name memory\n* @memberof WasmModule.prototype\n* @readonly\n* @type {(Object|null)}\n*/\nsetReadOnlyAccessor( WasmModule.prototype, 'memory', function get() {\n\treturn this._memory;\n});\n\n/**\n* Returns a WebAssembly memory buffer as a `Uint8Array`.\n*\n* @name buffer\n* @memberof WasmModule.prototype\n* @readonly\n* @type {(Uint8Array|null)}\n*/\nsetReadOnlyAccessor( WasmModule.prototype, 'buffer', function get() {\n\treturn this._buffer;\n});\n\n/**\n* Returns a WebAssembly memory buffer as a `DataView`.\n*\n* @name view\n* @memberof WasmModule.prototype\n* @readonly\n* @type {(DataView|null)}\n*/\nsetReadOnlyAccessor( WasmModule.prototype, 'view', function get() {\n\treturn this._view;\n});\n\n/**\n* Returns \"raw\" WebAssembly module exports.\n*\n* @name exports\n* @memberof WasmModule.prototype\n* @readonly\n* @type {(Object|null)}\n*/\nsetReadOnlyAccessor( WasmModule.prototype, 'exports', function get() {\n\tif ( !this._instance ) {\n\t\treturn null;\n\t}\n\treturn objectAssign( {}, this._instance.exports );\n});\n\n/**\n* Asynchronously initializes a WebAssembly module instance.\n*\n* @name initialize\n* @memberof WasmModule.prototype\n* @readonly\n* @type {Function}\n* @returns {Promise} promise which resolves upon initializing a WebAssembly module instance\n*/\nsetReadOnly( WasmModule.prototype, 'initialize', function initialize() {\n\tvar self;\n\tvar fcn;\n\n\tself = this;\n\tif ( this._instance ) {\n\t\tfcn = returnInstance;\n\t} else {\n\t\tfcn = instantiate;\n\t}\n\t// FIXME: replace with `@stdlib/promise/ctor`\n\treturn new Promise( fcn ); // eslint-disable-line stdlib/require-globals\n\n\t/**\n\t* Returns a WebAssembly instance.\n\t*\n\t* @private\n\t* @param {Function} resolve - callback to invoke upon fulfilling a promise\n\t* @param {Function} reject - callback to invoke upon rejecting a promise\n\t* @returns {void}\n\t*/\n\tfunction returnInstance( resolve ) {\n\t\tresolve( self );\n\t}\n\n\t/**\n\t* Instantiates a WebAssembly instance.\n\t*\n\t* @private\n\t* @param {Function} resolve - callback to invoke upon fulfilling a promise\n\t* @param {Function} reject - callback to invoke upon rejecting a promise\n\t* @returns {void}\n\t*/\n\tfunction instantiate( resolve, reject ) {\n\t\tvar p = WebAssembly.instantiate( self._binary, self._imports ); // TODO: replace with `@stdlib/wasm/instantiate`\n\t\tp.then( onResolve, onReject );\n\n\t\t/**\n\t\t* Callback invoked upon fulfilling a promise.\n\t\t*\n\t\t* @private\n\t\t* @param {Object} module - WebAssembly module\n\t\t* @param {Object} instance - WebAssembly instance\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction onResolve( module, instance ) {\n\t\t\tself._module = module;\n\t\t\tself._instance = instance;\n\t\t\tresolve( self );\n\t\t}\n\n\t\t/**\n\t\t* Callback invoked upon rejecting a promise.\n\t\t*\n\t\t* @private\n\t\t* @param {*} reason - reason for rejecting a promise\n\t\t*/\n\t\tfunction onReject( reason ) {\n\t\t\treject( reason );\n\t\t}\n\t}\n});\n\n/**\n* Asynchronously initializes a WebAssembly module instance.\n*\n* @name initializeAsync\n* @memberof WasmModule.prototype\n* @readonly\n* @type {Function}\n* @param {Callback} clbk - callback to invoke upon initializing a WebAssembly module instance\n* @throws {TypeError} must provide a callback function\n* @returns {void}\n*/\nsetReadOnly( WasmModule.prototype, 'initializeAsync', function initializeAsync( clbk ) {\n\tvar self;\n\tvar p;\n\n\tif ( !isFunction( clbk ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a function. Value: `%s`.', clbk ) );\n\t}\n\tif ( this._instance ) {\n\t\treturn clbk( null, this );\n\t}\n\tself = this;\n\tp = WebAssembly.instantiate( this._binary, this._imports ); // TODO: replace with `@stdlib/wasm/instantiate`\n\tp.then( onResolve, onReject );\n\n\t/**\n\t* Callback invoked upon fulfilling a promise.\n\t*\n\t* @private\n\t* @param {Object} module - WebAssembly module\n\t* @param {Object} instance - WebAssembly instance\n\t* @returns {void}\n\t*/\n\tfunction onResolve( module, instance ) {\n\t\tself._module = module;\n\t\tself._instance = instance;\n\t\tclbk( null, self );\n\t}\n\n\t/**\n\t* Callback invoked upon rejecting a promise.\n\t*\n\t* @private\n\t* @param {*} reason - reason for rejecting a promise\n\t*/\n\tfunction onReject( reason ) {\n\t\tclbk( reason );\n\t}\n});\n\n/**\n* Synchronously initializes a WebAssembly module instance.\n*\n* ## Notes\n*\n* -   In web browsers, JavaScript engines may raise an exception when attempting to synchronously compile large WebAssembly binaries due to concerns about blocking the main thread. Hence, for large binaries (e.g., >4KiB), consider using asynchronous initialization methods.\n*\n* @name initializeSync\n* @memberof WasmModule.prototype\n* @readonly\n* @type {Function}\n* @returns {WasmModule} wrapper instance\n*/\nsetReadOnly( WasmModule.prototype, 'initializeSync', function initializeSync() {\n\tif ( this._instance ) {\n\t\treturn this;\n\t}\n\tthis._module = new WebAssembly.Module( this._binary ); // TODO: replace with `@stdlib/wasm/module`\n\tthis._instance = new WebAssembly.Instance( this._module, this._imports ); // TODO: replace with `@stdlib/wasm/instantiate`\n\treturn this;\n});\n\n/**\n* Reallocates the underlying WebAssembly memory instance to a specified number of bytes.\n*\n* ## Notes\n*\n* -   WebAssembly memory can only **grow**, not shrink. Hence, if provided a number of bytes which is less than or equal to the size of the current memory, the function does nothing.\n* -   When non-shared memory is resized, the underlying the `ArrayBuffer` is detached, consequently invalidating any associated typed array views. Before resizing non-shared memory, ensure that associated typed array views no longer need byte access and can be garbage collected.\n*\n* @name realloc\n* @memberof WasmModule.prototype\n* @readonly\n* @type {Function}\n* @param {NonNegativeInteger} nbytes - memory size (in bytes)\n* @throws {TypeError} must provide a nonnegative integer\n* @returns {boolean} boolean indicating whether the resize operation was successful\n*/\nsetReadOnly( WasmModule.prototype, 'realloc', function realloc( nbytes ) {\n\tvar size;\n\tif ( !isNonNegativeInteger( nbytes ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative integer. Value: `%s`.', nbytes ) );\n\t}\n\tif ( this._memory === null ) {\n\t\treturn false;\n\t}\n\tsize = ceil( ( nbytes-this._buffer.length ) / PAGE_SIZE );\n\tif ( size > 0 ) {\n\t\ttry {\n\t\t\tthis._memory.grow( size );\n\t\t} catch ( err ) { // eslint-disable-line no-unused-vars\n\t\t\treturn false;\n\t\t}\n\t\tthis._view = new DataView( this._memory.buffer );\n\t\tthis._buffer = new Uint8Array( this._memory.buffer );\n\t\treturn true;\n\t}\n\treturn false;\n});\n\n/**\n* Returns a boolean indicating whether the underlying WebAssembly memory instance has the capacity to store a provided list of values starting from a specified byte offset.\n*\n* @name hasCapacity\n* @memberof WasmModule.prototype\n* @readonly\n* @type {Function}\n* @param {NonNegativeInteger} byteOffset - byte offset at which to start writing values\n* @param {Collection} values - input array containing values to write\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be a collection\n* @returns {boolean} boolean indicating whether the underlying WebAssembly memory instance has enough capacity\n*/\nsetReadOnly( WasmModule.prototype, 'hasCapacity', function hasCapacity( byteOffset, values ) {\n\tvar nb;\n\tif ( !isNonNegativeInteger( byteOffset ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', byteOffset ) );\n\t}\n\tif ( !isCollection( values ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object. Value: `%s`.', values ) );\n\t}\n\tif ( this._memory === null ) {\n\t\treturn false;\n\t}\n\tnb = bytesPerElement( dtype2wasm( dtype( values ) || 'generic' ) );\n\tif ( (values.length*nb)+byteOffset > this._buffer.length ) {\n\t\treturn false;\n\t}\n\treturn true;\n});\n\n/**\n* Returns a boolean indicating whether a provided list of values is a view of the underlying memory of the WebAssembly module.\n*\n* @name isView\n* @memberof WasmModule.prototype\n* @readonly\n* @type {Function}\n* @param {Collection} values - input array\n* @throws {TypeError} must provide a collection\n* @returns {boolean} boolean indicating whether the list is a memory view\n*/\nsetReadOnly( WasmModule.prototype, 'isView', function isView( values ) {\n\tif ( !isCollection( values ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an array-like object. Value: `%s`.', values ) );\n\t}\n\tif ( this._memory && values.buffer ) {\n\t\treturn ( values.buffer === this._memory.buffer );\n\t}\n\treturn false;\n});\n\n/**\n* Writes values to the underlying WebAssembly memory instance.\n*\n* ## Notes\n*\n* -   The function infers element size (i.e., number of bytes per element) from the data type of the input array. For example, if provided a `Float32Array`, the function writes each element as a single-precision floating-point number to the underlying WebAssembly memory instance.\n* -   In order to write elements as a different data type, you need to perform an explicit cast **before** calling this method. For example, in order to write single-precision floating-point numbers contained in a `Float32Array` as signed 32-bit integers, you must first convert the `Float32Array` to an `Int32Array` before passing the values to this method.\n* -   If provided an array having an unknown or \"generic\" data type, elements are written as double-precision floating-point numbers.\n*\n* @name write\n* @memberof WasmModule.prototype\n* @readonly\n* @type {Function}\n* @param {NonNegativeInteger} byteOffset - byte offset at which to start writing values\n* @param {Collection} values - input array containing values to write\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be a collection\n* @throws {Error} unable to perform write operation as the module is not bound to a memory instance\n* @throws {RangeError} insufficient memory\n* @returns {WasmModule} wrapper instance\n*/\nsetReadOnly( WasmModule.prototype, 'write', function write( byteOffset, values ) {\n\tvar nb;\n\tif ( this._memory === null ) {\n\t\tthrow new Error( 'invalid invocation. Unable to perform write operation, as the WebAssembly module is not bound to an underlying WebAssembly memory instance.' );\n\t}\n\tif ( !isNonNegativeInteger( byteOffset ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', byteOffset ) );\n\t}\n\tif ( !isCollection( values ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object. Value: `%s`.', values ) );\n\t}\n\tnb = bytesPerElement( dtype2wasm( dtype( values ) || 'generic' ) );\n\tif ( (values.length*nb)+byteOffset > this._buffer.length ) {\n\t\tthrow new RangeError( 'invalid argument. Second argument is incompatible with the specified byte offset and available memory. Resize the underlying memory instance in order to accommodate the list of provided values.' );\n\t}\n\twriteDataView( values.length, values, 1, 0, this._view, nb, byteOffset, true ); // eslint-disable-line max-len\n\treturn this;\n});\n\n/**\n* Reads values from the underlying WebAssembly memory instance.\n*\n* ## Notes\n*\n* -   The function infers element size (i.e., number of bytes per element) from the data type of the output array. For example, if provided a `Float32Array`, the function reads each element as a single-precision floating-point number from the underlying WebAssembly memory instance.\n* -   In order to read elements as a different data type, you need to perform an explicit cast **after** calling this method. For example, in order to read single-precision floating-point numbers contained in a `Float32Array` as signed 32-bit integers, you must convert the `Float32Array` to an `Int32Array` after reading memory values using this method.\n* -   If provided an output array having an unknown or \"generic\" data type, elements are read as double-precision floating-point numbers.\n*\n* @name read\n* @memberof WasmModule.prototype\n* @readonly\n* @type {Function}\n* @param {NonNegativeInteger} byteOffset - byte offset at which to start reading values\n* @param {Collection} out - output array for storing read values\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be a collection\n* @throws {Error} unable to perform read operation as the module is not bound to a memory instance\n* @throws {RangeError} output array exceeds module memory\n* @returns {WasmModule} wrapper instance\n*/\nsetReadOnly( WasmModule.prototype, 'read', function write( byteOffset, out ) {\n\tvar nb;\n\tif ( this._memory === null ) {\n\t\tthrow new Error( 'invalid invocation. Unable to perform read operation, as the WebAssembly module is not bound to an underlying WebAssembly memory instance.' );\n\t}\n\tif ( !isNonNegativeInteger( byteOffset ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', byteOffset ) );\n\t}\n\tif ( !isCollection( out ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object. Value: `%s`.', out ) );\n\t}\n\tnb = bytesPerElement( dtype2wasm( dtype( out ) || 'generic' ) );\n\tif ( (out.length*nb)+byteOffset > this._buffer.length ) {\n\t\tthrow new RangeError( 'invalid argument. Second argument is incompatible with the specified byte offset and available memory. Not enough values to fill the provided output array.' );\n\t}\n\treadDataView( out.length, this._view, nb, byteOffset, out, 1, 0, true );\n\treturn this;\n});\n\n\n// EXPORTS //\n\nexport default WasmModule;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils/define-read-only-property';\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name base\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/wasm/base}\n*/\nimport base from './../base';\nsetReadOnly( ns, 'base', base );\n\n/**\n* @name Memory\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/wasm/memory}\n*/\nimport Memory from './../memory';\nsetReadOnly( ns, 'Memory', Memory );\n\n/**\n* @name ModuleWrapper\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/wasm/module-wrapper}\n*/\nimport ModuleWrapper from './../module-wrapper';\nsetReadOnly( ns, 'ModuleWrapper', ModuleWrapper );\n\n\n// EXPORTS //\n\nexport default ns;\n"],"names":["dtype2wasm","dtype","TABLE","ns","setReadOnly","array","ctx","list","ptr","out","tmp","o","n","i","length","objectAssign","BYTES_PER_ELEMENT","bytesPerElement","wdtype","nbytes","isView","data","byteOffset","copy","push","realloc","writeDataView","stride","offset","view","N","x","obj","base","Memory","WebAssembly","hasWebAssemblySupport","builtin","Error","HAS_WASM_SUPPORT","WasmModule","binary","memory","imports","this","arguments","isArrayBuffer","Uint8Array","_binary","_module","_instance","_imports","_memory","_view","DataView","buffer","_buffer","setReadOnlyAccessor","prototype","slice","exports","self","fcn","resolve","reject","onResolve","module","instance","onReject","reason","instantiate","then","Promise","clbk","isFunction","TypeError","format","Module","Instance","size","isNonNegativeInteger","ceil","grow","err","values","nb","isCollection","RangeError","readDataView","ModuleWrapper"],"mappings":";;qhEAwCA,SAASA,EAAYC,GACpB,OAAOC,EAAOD,IAAW,SAC1B,CCNA,IAAAE,EAAA,CAAA,EAUAC,EAAAD,EAAA,eCIA,SAAsBE,GACrB,OAAOL,EAAYC,EAAOI,IAAW,UACtC,IDIAD,EAAAD,EAAA,eE6DA,SAAsBG,EAAKC,GAC1B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAOJ,IAJAJ,EAAM,GAGNG,EAAI,EACEC,EAAI,EAAGA,EAAIN,EAAKO,OAAQD,IAC7BF,EAAIJ,EAAMM,IAGVH,EAAMK,EAAc,GAAIJ,IAGpBK,kBAAoBC,EAAiBN,EAAEO,QAC3CR,EAAIS,OAASR,EAAEG,OAASJ,EAAIM,kBAGvBV,EAAIc,OAAQT,EAAEU,OAClBX,EAAIF,IAAMG,EAAEU,KAAKC,WACjBZ,EAAIa,MAAO,IAEXb,EAAIF,KAAO,EACXE,EAAIa,MAAO,EACXX,GAAKF,EAAIS,QAEVV,EAAIe,KAAMd,GAQX,IALKE,EAAI,GACRN,EAAImB,QAASb,GAGdJ,EAAM,EACAK,EAAI,EAAGA,EAAIJ,EAAIK,OAAQD,KAC5BF,EAAIF,EAAKI,IACFU,OACNG,EAAef,EAAEG,OAAQH,EAAEU,KAAMV,EAAEgB,OAAQhB,EAAEiB,OAAQtB,EAAIuB,KAAMlB,EAAEK,kBAAmBR,GAAK,GAGzFG,EAAEH,IAAMA,EAGRG,EAAEgB,OAAS,EACXhB,EAAEiB,OAAS,EAGXpB,GAAOG,EAAEQ,QAGX,OAAOV,CACR,IF5GAL,EAAAD,EAAA,aAAAH,GAUAI,EAAAD,EAAA,kBGDA,SAAyB2B,EAAGC,EAAGJ,EAAQC,GACtC,IAAII,EAAMC,EAAMH,EAAGC,EAAGJ,EAAQC,GAE9B,OADAI,EAAId,OAASlB,EAAYgC,EAAI/B,OAAS,WAC/B+B,CACR,ICxCA,IAAIE,EAAkC,iBAAhBC,YAA6BA,YAAYD,OAAS,KCaxE,IAAAA,EATKE,IACGC,ECjBR,WACC,MAAM,IAAIC,MAAO,kBAClB,ECgBIC,EAAmBH,IAgBvB,SAASI,EAAYC,EAAQC,EAAQC,GACpC,KAAQC,gBAAgBJ,GACvB,OACQ,IAAIA,EAAYC,EAAQC,EAD3BG,UAAU/B,OAAS,EACgB6B,EAED,CAAE,GAE1C,IAAMJ,EACL,MAAM,IAAID,MAAO,+DAoBlB,OAlBKQ,EAAeL,KACnBA,EAAS,IAAIM,EAAYN,IAE1BG,KAAKI,QAAUP,EACfG,KAAKK,QAAU,KACfL,KAAKM,UAAY,KACjBN,KAAKO,SAAWR,EAEXD,GACJE,KAAKQ,QAAUV,EACfE,KAAKS,MAAQ,IAAIC,EAAUZ,EAAOa,QAClCX,KAAKY,QAAU,IAAIT,EAAYL,EAAOa,UAEtCX,KAAKQ,QAAU,KACfR,KAAKS,MAAQ,KACbT,KAAKY,QAAU,MAGTZ,IACR,CAUAa,EAAqBjB,EAAWkB,UAAW,UAAU,WACpD,OAAOd,KAAKI,QAAQW,OACrB,IAUAF,EAAqBjB,EAAWkB,UAAW,UAAU,WACpD,OAAOd,KAAKQ,OACb,IAUAK,EAAqBjB,EAAWkB,UAAW,UAAU,WACpD,OAAOd,KAAKY,OACb,IAUAC,EAAqBjB,EAAWkB,UAAW,QAAQ,WAClD,OAAOd,KAAKS,KACb,IAUAI,EAAqBjB,EAAWkB,UAAW,WAAW,WACrD,OAAMd,KAAKM,UAGJnC,EAAc,CAAE,EAAE6B,KAAKM,UAAUU,SAFhC,IAGT,IAWAxD,EAAaoC,EAAWkB,UAAW,cAAc,WAChD,IAAIG,EACAC,EASJ,OAPAD,EAAOjB,KAENkB,EADIlB,KAAKM,UAgBV,SAAyBa,GACxBA,EAASF,EACT,EAUD,SAAsBE,EAASC,GAY9B,SAASC,EAAWC,EAAQC,GAC3BN,EAAKZ,QAAUiB,EACfL,EAAKX,UAAYiB,EACjBJ,EAASF,EACT,CAQD,SAASO,EAAUC,GAClBL,EAAQK,EACR,CAzBOlC,YAAYmC,YAAaT,EAAKb,QAASa,EAAKV,UAClDoB,KAAMN,EAAWG,EAyBnB,EAjDM,IAAII,QAASV,EAkDrB,IAaA1D,EAAaoC,EAAWkB,UAAW,mBAAmB,SAA0Be,GAC/E,IAAIZ,EAGJ,IAAMa,EAAYD,GACjB,MAAM,IAAIE,UAAWC,EAAQ,0DAA2DH,IAEzF,GAAK7B,KAAKM,UACT,OAAOuB,EAAM,KAAM7B,MAEpBiB,EAAOjB,KACHT,YAAYmC,YAAa1B,KAAKI,QAASJ,KAAKO,UAC9CoB,MAUF,SAAoBL,EAAQC,GAC3BN,EAAKZ,QAAUiB,EACfL,EAAKX,UAAYiB,EACjBM,EAAM,KAAMZ,EACZ,IAQD,SAAmBQ,GAClBI,EAAMJ,EACN,GACF,IAeAjE,EAAaoC,EAAWkB,UAAW,kBAAkB,WACpD,OAAKd,KAAKM,YAGVN,KAAKK,QAAU,IAAId,YAAY0C,OAAQjC,KAAKI,SAC5CJ,KAAKM,UAAY,IAAIf,YAAY2C,SAAUlC,KAAKK,QAASL,KAAKO,WAHtDP,IAKT,IAkBAxC,EAAaoC,EAAWkB,UAAW,WAAW,SAAkBvC,GAC/D,IAAI4D,EACJ,IAAMC,EAAsB7D,GAC3B,MAAM,IAAIwD,UAAWC,EAAQ,qEAAsEzD,IAEpG,GAAsB,OAAjByB,KAAKQ,QACT,OAAO,EAGR,IADA2B,EAAOE,GAAQ9D,EAAOyB,KAAKY,QAAQ1C,QArRpB,QAsRH,EAAI,CACf,IACC8B,KAAKQ,QAAQ8B,KAAMH,EACnB,CAAC,MAAQI,GACT,OAAO,CACP,CAGD,OAFAvC,KAAKS,MAAQ,IAAIC,EAAUV,KAAKQ,QAAQG,QACxCX,KAAKY,QAAU,IAAIT,EAAYH,KAAKQ,QAAQG,SACrC,CACP,CACD,OAAO,CACR,IAeAnD,EAAaoC,EAAWkB,UAAW,eAAe,SAAsBpC,EAAY8D,GACnF,IAAIC,EACJ,IAAML,EAAsB1D,GAC3B,MAAM,IAAIqD,UAAWC,EAAQ,+EAAgFtD,IAE9G,IAAMgE,EAAcF,GACnB,MAAM,IAAIT,UAAWC,EAAQ,+EAAgFQ,IAE9G,OAAsB,OAAjBxC,KAAKQ,UAGViC,EAAKpE,EAAiBjB,EAAYC,EAAOmF,IAAY,cAC/CA,EAAOtE,OAAOuE,EAAI/D,EAAasB,KAAKY,QAAQ1C,QAInD,IAaAV,EAAaoC,EAAWkB,UAAW,UAAU,SAAiB0B,GAC7D,IAAME,EAAcF,GACnB,MAAM,IAAIT,UAAWC,EAAQ,oEAAqEQ,IAEnG,SAAKxC,KAAKQ,UAAWgC,EAAO7B,SAClB6B,EAAO7B,SAAWX,KAAKQ,QAAQG,MAG1C,IAuBAnD,EAAaoC,EAAWkB,UAAW,SAAS,SAAgBpC,EAAY8D,GACvE,IAAIC,EACJ,GAAsB,OAAjBzC,KAAKQ,QACT,MAAM,IAAId,MAAO,+IAElB,IAAM0C,EAAsB1D,GAC3B,MAAM,IAAIqD,UAAWC,EAAQ,+EAAgFtD,IAE9G,IAAMgE,EAAcF,GACnB,MAAM,IAAIT,UAAWC,EAAQ,+EAAgFQ,IAG9G,GADAC,EAAKpE,EAAiBjB,EAAYC,EAAOmF,IAAY,YAC/CA,EAAOtE,OAAOuE,EAAI/D,EAAasB,KAAKY,QAAQ1C,OACjD,MAAM,IAAIyE,WAAY,qMAGvB,OADA7D,EAAe0D,EAAOtE,OAAQsE,EAAQ,EAAG,EAAGxC,KAAKS,MAAOgC,EAAI/D,GAAY,GACjEsB,IACR,IAuBAxC,EAAaoC,EAAWkB,UAAW,QAAQ,SAAgBpC,EAAYb,GACtE,IAAI4E,EACJ,GAAsB,OAAjBzC,KAAKQ,QACT,MAAM,IAAId,MAAO,8IAElB,IAAM0C,EAAsB1D,GAC3B,MAAM,IAAIqD,UAAWC,EAAQ,+EAAgFtD,IAE9G,IAAMgE,EAAc7E,GACnB,MAAM,IAAIkE,UAAWC,EAAQ,+EAAgFnE,IAG9G,GADA4E,EAAKpE,EAAiBjB,EAAYC,EAAOQ,IAAS,YAC5CA,EAAIK,OAAOuE,EAAI/D,EAAasB,KAAKY,QAAQ1C,OAC9C,MAAM,IAAIyE,WAAY,+JAGvB,OADAC,EAAc/E,EAAIK,OAAQ8B,KAAKS,MAAOgC,EAAI/D,EAAYb,EAAK,EAAG,GAAG,GAC1DmC,IACR,IC/aA,IAAAzC,EAAA,CAAA,EAUAC,EAAAD,EAAA,OAAA8B,GAUA7B,EAAAD,EAAA,SAAA+B,GAUA9B,EAAAD,EAAA,gBAAAsF"}